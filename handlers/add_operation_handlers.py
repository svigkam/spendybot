import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from keyboards import mainKeyboard, addIncomeKeyboard, addExpenseKeyboard, cancelKeyboard

from repositories import db_repo as db
from main import dp

income_cats = [
    'SALARY', 'PRESENT', 'OTHER', 'OVERWORK'
]


class AddIncomeStatesGroup(StatesGroup):
    category = State()
    amount = State()


class AddExpenseStatesGroup(StatesGroup):
    amount = State()
    category = State()


# ======================= ADD INCOME =======================

@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥')
async def add_income(message: types.Message):
    await message.answer('üìç –í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞:', reply_markup=addIncomeKeyboard)
    await message.answer('üçÅ –î–ª—è –æ—Ç–º–µ–Ω—ã —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ /cancel', reply_markup=cancelKeyboard)
    await AddIncomeStatesGroup.category.set()


@dp.callback_query_handler(lambda call: call.data in income_cats, state=AddIncomeStatesGroup.category)
async def add_income_category(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = callback.data
    await callback.message.delete()
    await callback.message.answer('üìç –û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É: ', reply_markup=cancelKeyboard)
    await AddIncomeStatesGroup.amount.set()
    await callback.answer()


@dp.message_handler(regexp=r"\D", state=AddIncomeStatesGroup.amount)
async def add_income_amount_check(message: types.Message, state: FSMContext):
    await message.answer('‚õîÔ∏è –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏ —Å—É–º–º—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–æ–≤, –∫ –ø—Ä–∏–º–µ—Ä—É 2500.')


@dp.message_handler(regexp=r"\d", state=AddIncomeStatesGroup.amount)
async def add_income_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['amount'] = message.text
    await db.add_income_operation(message.from_user.id, state)
    await message.answer('‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=mainKeyboard)
    await state.finish()


# ======================= ADD EXPENSE =======================

@dp.message_handler(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
async def add_expense(message: types.Message):
    await message.answer('üìç –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–≤–æ–µ–π –ø–æ–∫—É–ø–∫–∏:', reply_markup=addExpenseKeyboard)
    await message.answer('üçÅ –î–ª—è –æ—Ç–º–µ–Ω—ã —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ /cancel', reply_markup=cancelKeyboard)
    await AddExpenseStatesGroup.category.set()


@dp.callback_query_handler(state=AddExpenseStatesGroup.category)
async def add_expense_category(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = callback.data
    await callback.message.delete()
    await callback.message.answer('üìç –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:')
    await AddExpenseStatesGroup.amount.set()
    await callback.answer()


@dp.message_handler(regexp=r"\D", state=AddExpenseStatesGroup.amount)
async def add_expense_amount_check(message: types.Message):
    await message.answer('‚õîÔ∏è –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏ —Å—É–º–º—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–æ–≤, –∫ –ø—Ä–∏–º–µ—Ä—É 2500.')


@dp.message_handler(regexp=r"\d", state=AddExpenseStatesGroup.amount)
async def add_expense_amount(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['amount'] = message.text
    await db.add_expense_operation(message.from_user.id, state)
    await message.answer('‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=mainKeyboard)
    await state.finish()





